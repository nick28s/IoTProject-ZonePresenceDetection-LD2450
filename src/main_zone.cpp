#include <Arduino.h>
#include <LD2450.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/eedb4da4-8d9d-47b8-8256-e071359e6e85 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudMotionSensor zone1;
  CloudMotionSensor zone2;
  CloudMotionSensor zone3;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

const int ledPin = 2;

String last_target_data = "";

// SENSOR INSTANCE
LD2450 ld2450;

// Define zones as rectangles with (x1, y1)LeftDownCorner and (x2, y2)RightUpCorner
struct Zone {
    int x1, y1, x2, y2;
};

Zone zones[3] = {
    {1, 1, 4000, 4000},   // Zone 1
    {-4000, 1, -1, 4000}, // Zone 2
    {-4001, 4001, 4001, 8000}  // Zone 3
};

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);
  ld2450.setNumberOfTargets(3);
  // SETUP SENSOR USING HARDWARE SERIAL INTERFACE 2
  ld2450.begin(Serial2, false);

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  zone1=false;
  zone2=false;
  zone3=false;
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  last_target_data = "";
  if (ld2450.read() > 0)
  {
      if (ld2450.getTarget(0).valid == 0 && ld2450.getTarget(1).valid == 0 && ld2450.getTarget(2).valid == 0)
      {
          digitalWrite(ledPin, LOW);
          zone1=false;
          zone2=false;
          zone3=false;
      }
      else
      {
          digitalWrite(ledPin, HIGH);
          for (int i = 0; i < ld2450.getSensorSupportedTargetCount(); i++)
          {
              const LD2450::RadarTarget target = ld2450.getTarget(i);
              // Add target information to the string
              last_target_data += "TARGET ID=" + String(i + 1) + " X=" + String((0-target.x)) + "mm, Y=" + String(target.y) + "mm, SPEED=" + String(target.speed) + "cm/s, RESOLUTION=" + String(target.resolution) + "mm, DISTANCE=" + String(target.distance) + "mm, VALID=" + String(target.valid) + "\n";

              // Check if target is within any zone
              for (int j = 0; j < 3; j++)
              {
                  if ((0-target.x) >= zones[j].x1 && (0-target.x) <= zones[j].x2 && target.y >= zones[j].y1 && target.y <= zones[j].y2)
                  {
                      Serial.println("TARGET ID=" + String(i + 1) + " is within ZONE " + String(j + 1));
                      switch(j+1)
                      {
                        case 1: zone1 = true;
                                zone2 = false;
                                zone3 = false;
                                break;
                        case 2: zone1 = false;
                                zone2 = true; 
                                zone3 = false;
                                break;
                        case 3: zone3 = true;
                                zone1 = false;
                                zone2 = false;
                                break;
                        default: zone1 = false;
                                 zone2 = false;
                                 zone3 = false;
                      }  
                  }
              }
          }
          Serial.println(last_target_data);
      }
  }

}
